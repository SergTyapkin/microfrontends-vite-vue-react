# load_module modules/ngx_http_brotli_filter_module.so; # for compressing responses on-the-fly
# load_module modules/ngx_http_brotli_static_module.so; # for serving pre-compressed files

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '${DOLLAR}remote_addr - ${DOLLAR}remote_user [${DOLLAR}time_local] "${DOLLAR}request" '
                      '${DOLLAR}status ${DOLLAR}body_bytes_sent "${DOLLAR}http_referer" '
                      '"${DOLLAR}http_user_agent" "${DOLLAR}http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    gzip on;
#     brotli on;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    server {
        listen 80;
        listen [::]:80;
        server_name ${DOMAIN_URL};
        server_tokens off;

        # Setup CORS
        if (${DOLLAR}http_origin = "") {
            set ${DOLLAR}http_origin "*";
        }
        add_header Access-Control-Allow-Origin ${DOLLAR}http_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, HEAD" always;
        add_header Access-Control-Allow-Headers "Origin,Content-Type,Accept,Authorization" always;
        add_header Access-Control-Allow-Credentials "true" always;

        include /etc/nginx/include_locations/https/*.conf;
        include /etc/nginx/include_locations/http/*.conf;
    }

    server {
        listen       443;
        listen       [::]:443;
        server_name  ${DOMAIN_URL};
        server_tokens off;

        return 301 http://${DOLLAR}host${DOLLAR}request_uri;  # redirect on http
    }
}
